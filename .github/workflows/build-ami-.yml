name: Packer CI Merged
on:
  push:
    branches:
      - main
jobs:
  build:
    name: Build AMI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install dependencies
        run: |
          npm install
          npm install winston
          npm install node-statsd
          npm install hot-shots



      - name: Display .env file
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=swaradb" >> .env
          echo "PORT=8080" >> .env
          cat .env

      - name: Configure MySQL
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo systemctl start mysql
          sudo systemctl status mysql
          mysql -u ${{ secrets.DB_USER }} -p"${{ secrets.DB_PASSWORD }}" -e "CREATE DATABASE swaradb;"

      - name: Run Integration Tests
        run: npm test
 
      - name: Download webapp repository
        run: zip -r webapp.zip ./

      - name: Configure AWS Credentials
        run: |
              aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws configure set default.region us-east-1  # Replace with your desired AWS region
              aws configure set default.output json
              aws configure set profile.aws_cli_dev.aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws configure set profile.aws_cli_dev.aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build AMI with Packer
        run: |
          packer init .
          packer fmt -check ami-packer.pkr.hcl
          packer build ami-packer.pkr.hcl
 
      - name: Capture AMI ID from Packer Output
        id: capture-ami-id
        run: |
          ami_id=$(cat packer-build-output.txt | grep 'artifact,0,id' | cut -d' ' -f2)
          echo "AMI_ID=${ami_id}" >> $GITHUB_ENV
        working-directory: .

      - name: Update Launch Template with Latest AMI

        run: |
          echo "Using AMI ID: $AMI_ID" # For debugging: this line will output the AMI ID in the logs
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --query "LaunchTemplates[?LaunchTemplateName=='app-launch-template'].LaunchTemplateId" --output text)
          echo "Using Launch Template ID: $LAUNCH_TEMPLATE_ID" # For debugging
          aws ec2 create-launch-template-version --launch-template-id "$LAUNCH_TEMPLATE_ID" --source-version "$LATEST" --launch-template-data "{\"ImageId\":\"$AMI_ID\"}"
     
      # - name: Update Launch Template with Latest AMI
      #   run: |
      #        AMI_ID=${{ steps.ami_id.outputs.ami_id }}
      #        aws ec2 create-launch-template-version --launch-template-id "lt-0abcd1234abcd1234" --source-version "$LATEST" --launch-template-data "{\"ImageId\":\"$AMI_ID\"}"
 
      - name: Retrieve latest Launch Template version
        run: |
          LAUNCH_TEMPLATE_NAME="app-launch-template"
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name "$LAUNCH_TEMPLATE_NAME" --query 'LaunchTemplateVersions | sort_by(@, &VersionNumber) | [-1].VersionNumber' --output text)
          echo "Latest Launch Template Version: $LATEST_VERSION"
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
 
      - name: Update ASG to use the latest Launch Template version
        run: |
          ASG_NAME="app-auto-scaling-group"
          LATEST_VERSION=${{ env.LATEST_VERSION }}
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name "$ASG_NAME" --launch-template "LaunchTemplateName=$LAUNCH_TEMPLATE_NAME,Version=$LATEST_VERSION"
     
      - name: Start Instance Refresh
        run: |
          INSTANCE_REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name "app-auto-scaling-group" --strategy "Rolling" --query 'InstanceRefreshId' --output text)
 
          echo "Instance Refresh ID: $INSTANCE_REFRESH_ID"
          echo "INSTANCE_REFRESH_ID=$INSTANCE_REFRESH_ID" >> $GITHUB_ENV
 
      - name: Wait for Instance Refresh Completion
        run: |
          while true; do
              STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name "app-auto-scaling-group" --instance-refresh-ids "${{ env.INSTANCE_REFRESH_ID }}" --query 'InstanceRefreshes[0].Status' --output text)
 
              if [ "$STATUS" = "Successful" ]; then
                  echo "Instance refresh completed successfully"
                  break
              elif [ "$STATUS" = "Failed" ]; then
                  echo "Instance refresh failed"
                  exit 1
              else
                  echo "Waiting for instance refresh... Current status: $STATUS"
                  sleep 60
              fi
          done

        continue-on-error: true  # Ignore errors if the AMI ID is not found
